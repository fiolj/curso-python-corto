.. _clase_00:

Clase 0: Introducción al lenguaje
==================================


Cómo empezar: Instalación y uso
-------------------------------

**Python** es un lenguaje de programación interpretado, que se puede
ejecutar sobre distintos sistemas operativos, esto se conoce como
multiplataforma (suele usarse el término *cross-platform*). Además, la
mayoría de los programas que existen (y posiblemente todos los que
nosotros escribamos) pueden ejecutarse tanto en Linux, como en windows y
en Mac sin realizar ningún cambio.

**Versiones:** Hay dos versiones activas del lenguaje Python.

-  **Python2.X** (Python 2) es una versión madura, estable, y con muchas
   aplicaciones, y utilidades disponibles. No se sigue desarrollando
   pero se corrigen los errores.

-  **Python3.X** (Python 3) es la versión presente y futura. Se
   introdujo por primera vez en 2008, y produjo cambios incompatibles
   con Python 2. Por esa razón se mantienen ambas versiones y algunos de
   los desarrollos de Python 3 se *portan* a Python 2. En este momento
   la gran mayoría de los paquetes y utilidades utilizan Python 3 por lo
   que, salvo muy contadas excepciones, no hay razones para seguir
   utilizando Python 2.

Instalación
~~~~~~~~~~~

En este curso utilizaremos **Python 3**

Para una instalación fácil de Python y los paquetes para uso científico
se pueden usar alguna de las distribuciones disponibles
(`Anaconda <https://www.anaconda.com/distribution>`__,
`Canopy <http://www.enthought.com/product/canopy/>`__,
`Winpython <https://github.com/winpython/winpython>`__)

En linux se podría instalar alguna de estas distribuciones pero puede
ser más fácil instalar directamente todo lo necesario desde los
repositorios. Por ejemplo en Ubuntu:

::

   `sudo apt-get install ipython3 ipython3-notebook spyder python3-matplotlib python3-numpy python3-scipy`

   o, en Fedora 28, en adelante:

   `sudo dnf install python3-ipython python3-notebook python3-matplotlib python3-numpy python3-scipy`

Si no tiene instaladas las herramientas, una buena opción es instalar la
distribución `Anaconda <https://www.anaconda.com/distribution>`__ que
funciona en Linux, Windowsy MacOs. Para ello: - Descargue el
`instalador <https://www.anaconda.com/products/individual#Downloads>`__
para su plataforma. - Ejecútelo, y asegúrese de decir que sí cuando
pregunte si quiere que Anaconda sea su programa de Python
predeterminado.

Documentación y ayudas
~~~~~~~~~~~~~~~~~~~~~~

Algunas fuentes de ayuda *constante* son:

-  `La documentación oficial de Python <https://docs.python.org/3/>`__
-  En particular el `Tutorial <https://docs.python.org/3/tutorial/>`__,
   también `en español <http://docs.python.org.ar/tutorial/3/>`__ y la
   `referencia de
   bibliotecas <https://docs.python.org/3/reference/index.html>`__
-  En una terminal, puede obtener información sobre un paquete con
   ``pydoc <comando>``
-  En una consola interactiva de **Python**, mediante
   ``help(<comando>)``
-  La documentación de los paquetes:

   -  `Numpy <http://docs.scipy.org/doc/numpy/user/>`__
   -  `Matplotlib <http://matplotlib.org>`__, en particular la
      `galería <http://matplotlib.org/gallery.html>`__
   -  `Scipy <http://docs.scipy.org/doc/scipy/reference/>`__

-  Buscar “palabras clave + python” en un buscador. Es particularmente
   útil el sitio `stackoverflow <http://stackoverflow.com/>`__

Uso de Python: Interactivo o no
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Interfaces interactivas (consolas/terminales, notebooks)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Hay muchas maneras de usar el lenguaje Python. Es un lenguaje
**interpretado** e **interactivo**. Si ejecutamos la consola
(``cmd.exe`` en windows) y luego ``python``, se abrirá la consola
interactiva

.. image:: figuras/console.png



En la consola interactiva podemos escribir sentencias o pequeños bloques
de código que son ejecutados inmediatamente. Pero *la consola
interactiva* estándar no tiene tantas características de conveniencia
como otras, por ejemplo **IPython** que viene con “accesorios de
*comfort*”.

.. image:: figuras/ipython.png



La consola IPython supera a la estándar en muchos sentidos. Podemos
autocompletar (``<TAB>``), ver ayuda rápida de cualquier objeto (``?``),
etc.

Programas/scripts
^^^^^^^^^^^^^^^^^

Una forma muy común/poderosa de usar Python es en forma *no
interactiva*, escribiendo *programas* o *scripts*. Esto es, escribir
nuestro código en un archivo con extensión *.py* para luego ejecutarlo
con el intérprete. Por ejemplo, podemos crear un archivo *hello.py* (al
que se le llama *módulo*) con este contenido:

::

   print("Hola Mundo!")

Si ejecutamos ``python hello.py`` o ``ipython hello.py`` se ejecutará el
interprete Python y obtendremos el resultado esperado (impresión por
pantalla de “Hola Mundo!”, sin las comillas)

**Python** no exige un editor específico y hay muchos modos y maneras de
programar. Lo que es importante al programar en **Python** es que la
*indentación* define los bloques (definición de loops, if/else,
funciones, clases, etc). Por esa razón es importante que el tabulado no
mezcle espacios con caracteres específicos de tabulación. La manera que
recomendaría es usar siempre espacios (uno usa la tecla [TAB] pero el
editor lo traduce a un número determinado de espacios). La indentación
recomendada es de **4** espacios (pero van a notar que yo uso **2**).

Un buen editor es **Spyder** que tiene características de IDE (entorno
integrado: editor + ayuda + consola interactiva).

.. image:: figuras/spyder.png



Otro entorno integrado, que funciona muy bien, viene instalado con
**Canopy**.

.. image:: figuras/canopy-cluster.png



En ambos casos se puede ejecutar todo el módulo en la consola
interactiva que incluye. Alternativamente, también se puede seleccionar
**sólo** una porción del código para ejecutar.

Notebooks de Jupyter
^^^^^^^^^^^^^^^^^^^^

Para trabajar en forma interactiva es muy útil usar los *Notebooks* de
Jupyter. El notebook es un entorno interactivo enriquecido. Podemos
crear y editar “celdas” código Python que se pueden editar y volver a
ejecutar, se pueden intercalar celdas de texto, fórmulas matemáticas, y
hacer que los gráficos se muestren inscrutados en la misma pantalla o en
ventanas separadas. Además se puede escribir texto con formato (como
este que estamos viendo) con secciones, títulos. Estos archivos se
guardan con extensión *.ipynb*, que pueden exportarse en distintos
formatos tales como html (estáticos), en formato PDF, LaTeX, o como
código python puro. (.py)

Comandos de Ipython
~~~~~~~~~~~~~~~~~~~

Comandos de Navegación
^^^^^^^^^^^^^^^^^^^^^^

IPython conoce varios de los comandos más comunes en Linux. En la
terminal de IPython estos comandos funcionan independientemente del
sistema operativo (sí, incluso en windows). Estos se conocen con el
nombre de **comandos mágicos** y comienzan con el signo porcentaje
``%``. Para obtener una lista de los comandos usamos ``%lsmagic``:






.. code:: python

    %lsmagic

Algunos de los comandos mágicos
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Algunos de los comandos mágicos más importantes son:

-  ``%cd`` *direct* (Nos ubica en la carpeta direct)

-  ``%ls`` (muestra un listado del directorio)

-  ``%pwd`` (muestra el directorio donde estamos trabajando)

-  ``%run`` *filename* (corre un dado programa)

-  ``%hist`` (muestra la historia de comandos utilizados)

-  ``%mkdir`` *dname* (crea un directorio llamado dname)

-  ``%cat`` *fname* (Muestra por pantalla el contenido del archivo
   fname)

-  Tab completion: Apretando [TAB] completa los comandos o nombres de
   archivos.

En la consola de IPython tipee ``%cd ~`` (*i.e.* “``%cd``” – “espacio” –
“tilde”, y luego presione [RETURN]. Esto nos pone en el directorio HOME
(default).

Después tipee ``%pwd`` (print working directory) y presione [RETURN]
para ver en qué directorio estamos:

.. code:: python

    %cd ~

.. code:: python

    %pwd

En windows, el comando ``pwd`` va a dar algo así como:

::

   In [3]: pwd
   Out[3]: C:\\Users\\usuario

Vamos a crear un directorio donde guardar ahora los programas de ejemplo
que escribamos. Lo vamos a llamar ``scripts``.

Primero vamos a ir al directorio que queremos, y crearlo. En mi caso lo
voy a crear en mi HOME.

.. code:: python

    %cd 

.. code:: python

    %mkdir scripts

.. code:: python

    %cd scripts

.. code:: python

    %hist

Hay varios otros comandos mágicos en IPython. Para leer información
sobre el sistema de comandos mágicos utilice:

.. code:: python

    %magic

Finalmente, para obtener un resumen de comandos con una explicación
breve, utilice:

.. code:: python

    %quickref

Comandos de Shell
^^^^^^^^^^^^^^^^^

Se pueden correr comandos del sistema operativo (más útil en linux)
tipeando ``!`` seguido por el comando que se quiere ejecutar. Por
ejemplo:

comandos
''''''''

.. code:: python

    !echo " " >> prog1.py
    !echo "print('hola otra vez')" >> prog1.py

.. code:: python

    %ls prog*


.. parsed-literal::

    prog1.py


.. code:: python

    %cat prog1.py


.. parsed-literal::

     
    print('hola otra vez')


.. code:: python

    %run prog1.py


.. parsed-literal::

    hola otra vez


.. code:: python

    !date


.. parsed-literal::

    Tue Mar 26 19:34:17 -03 2019




